# Copyright: 2013 MoinMoin:Tarashish Mishra
# License: GNU GPL v2 (or any later version), see LICENSE.txt for details.
"""
    Generate a directory containing all the necessary modules and files to run the application.
    This directory can be compressed and distributed. The user can just unpack the compressed file and run the application
"""


import argparse
import glob
import os
import shutil
import tarfile
from distutils.sysconfig import get_python_lib

# The path to the directory where packages are currently installed
LIB_PATH = get_python_lib()

# The path of the directory where the modules from the the current python env need to be copied
SUPPORT_PATH = 'support'

# List of files and directories generally ignored when copying from python env
GENERAL_IGNORED_FILES = ['*.pyc', '*.pyo', '*.egg', '*.egg-info', '*.egg-link', '*.pth']

# List of files and directories to be ignored specific to the project
SPECIFIC_IGNORED_FILES = ['sphinx', 'py.test*', 'pytest*.py', '_pytest', 'py', 'execnet', 'pep8.py', 'selenium', 'werkzeug/testsuite', 'flask/testsuite', 'distribute', 'pip']

# Path to the tar file generated by setup.py sdist
DIST_PATH = "dist/moin-2.0.0a0.tar.gz"

# Directory to extract the tar file generated by setup.py sdist
EXTRACTION_PATH = 'dist'

# Name of the tar file containing all the modules and files needed for the app
SUPPORT_TAR_NAME = 'moin-2.0.0a0_with_support.tar.gz'

# Additional files to be added into the distribution package
SUPPORT_FILES = ['moin.py', 'app.yaml', 'wikiconfig.py']

# Files to be deleted from the distributing package
DELETED_FILES = ['moin.egg-info', 'PKG-INFO', 'MANIFEST.in', 'setup.*', 'quickinstall*', 'Makefile']

# Name of the tar archive to be created
SUPPORT_FILE_NAME = 'moin2-support.tgz'

DIST_DIR = DIST_PATH.replace('.tar.gz', '')
CURRENT_DIR = os.getcwd()


def delete_file_or_dir(path):
    try:
        if os.path.isdir(path):
            shutil.rmtree(path)
        else:
            os.remove(path)
    except OSError as err:
        print str(err)


def make_support():
    shutil.copytree(LIB_PATH, SUPPORT_PATH)
    for name in GENERAL_IGNORED_FILES + SPECIFIC_IGNORED_FILES:
        for path in glob.glob(os.path.join(SUPPORT_PATH, name)):
            delete_file_or_dir(path)


def make_supportdist():
    os.system('python setup.py sdist')
    tar = tarfile.open(DIST_PATH)
    tar.extractall(path=EXTRACTION_PATH)
    tar.close()
    shutil.copytree(SUPPORT_PATH, os.path.join(DIST_DIR, SUPPORT_PATH))

    for filepath in SUPPORT_FILES:
        shutil.copy(filepath, DIST_DIR)

    for name in DELETED_FILES:
        for path in glob.glob(os.path.join(DIST_DIR, name)):
            delete_file_or_dir(path)
    os.chdir(EXTRACTION_PATH)
    tar = tarfile.open(SUPPORT_TAR_NAME, "w:gz")
    tar.add(os.path.basename(os.path.normpath(DIST_DIR)))
    tar.close()
    os.chdir(CURRENT_DIR)
    shutil.rmtree(DIST_DIR)


def make_supporttgz():
    tar = tarfile.open(SUPPORT_FILE_NAME, "w:gz")
    tar.add(SUPPORT_PATH)
    tar.close()

parser = argparse.ArgumentParser()
parser.add_argument("--support", help="create support directory which contains all the modules and files needed by the application to run", action="store_true")
parser.add_argument("--supportdist", help="create distribution archive which the user can just extract and run ", action="store_true")
parser.add_argument("--supporttgz", help="create support archive containing all the modules and files needed for the application", action="store_true")
args = parser.parse_args()
if args.support:
    make_support()
if args.supportdist:
    make_supportdist()
if args.supporttgz:
    make_supporttgz()
